[tox]
envlist =
    py311{,-storage-credentials},
    py312{,-storage-credentials},
    docs,
    linters,
    packaging,
    migrations
# Use the Tox at least 4.16. If not available it will be auto-provisioned.
minversion = 4.16
# Make it possible to override the base python with the environment name.
ignore_base_python_conflict = true

[testenv]
# Use python 3.12 if it cannot be infered from the environment.
# See https://tox.wiki/en/latest/user_guide.html#test-environments for rules
# how basepython is selected from the environment name.
basepython = python3.12
extras =
    # Always include storage extras or connectors related tests will fail.
    py3{11,12}{,-storage-credentials}:
        storage_s3
        storage_gcs
        test
    docs:
        docs
        storage_s3
        storage_gcs
    linters, packaging, migrations:
        test
passenv =
    # Pass environment variables controlling project's tests.
    py{11,12}{,-storage-credentials},migrations: 
        RESOLWE_*
        DOCKER_*
        DJANGO_TEST_PROCESSES
        LC_*
        GITHUB_*
whitelist_externals =
    migrations: 
        bash
        psql
ignore_errors =
    !linters: false
    # Run all linters to see their output even if one of them fails.
    linters: true

[testenv:py3{11,12}{,-storage-credentials}]
commands =
    # General tests commands:
    # Print the environment and run tests.
    coverage run tests/manage.py test {env:TEST_SUITE:resolwe} \
        storage-credentials:  --pattern storage_credentials_test_*.py \
    --noinput --verbosity=2 --parallel
    coverage combine

[testenv:migrations]
allowlist_externals =
    bash
    psql
commands = 
    python tests/manage.py migrate
    bash -c '[[ $(./tests/manage.py makemigrations --dry-run) = '\
            '"No changes detected" ]] || exit 1'

[testenv:packaging]
commands =
    # Confirm that items checked into git are in sdist.
    check-manifest
    # Verify package metadata and confirm the long_description will render
    # correctly on PyPI.
    python -m build
    python -m twine check --strict dist/*

[testenv:linters]
commands =
    # Linter commands:
    # Check code formating with black.
    black --check resolwe
    # Check order of imports.
    isort --check-only --diff resolwe
    # Run PyFlakes and Ned Batchelder's McCabe script.
    flake8 resolwe
    # Check documentation formatting (PEP 257).
    pydocstyle resolwe --match='(?!test[_s]).*\.py'

[testenv:docs]
commands =
    # Build documentation.
    sphinx-build ./docs/ build/sphinx/html --fail-on-warning --fresh-env
